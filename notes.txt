1. ts for plain TS files & tsx for react components.

2. We maintain React components and React handles DOM(creating & updating DOM elements).

3. React application is tree of components with App being root.

4. React is a Lib ( lib is a tool vs framework is a toolset) for building UI.

5. DOM: tree like structure representing all elements/components in browser.

6. Virtual DOM: JS datastructure, lightweight , in memory representation.

7. In React a component cant return more than 1 element. Use Fragment (<>) to solve this issue.

8. In JSX we can only use html or other react components.

9. Type Annotation: We can specify the type of our vars & parameters.

10. Hook: fn allows to tap into built-in features in React

11. Each component is going to have its own state, independent of other components.

12. Interface in TS: using this we can define the shape or the interface of an obj.

13. Using Props we can pass data to our components.(like fn args)

14. State is local data in a React component.

15. rafce -> react Arrow Function Export component. shortcut

16. With children prop we can pass children to a component. "children: ReactNode" if we want to pass html.

17. A CSS module : all class names r scoped locally, to avoid name clashes with other CSS files.